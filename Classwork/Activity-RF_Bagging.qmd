---
title: "Classification: Bagging and Random Forests"
author: "YOUR NAME HERE"
format: 
  html:
    code-fold: true
    code-line-numbers: true
    code-tools: true
    self-contained: true
editor: visual
execute:
  message: false
---

```{r, eval = TRUE, version = "none"}
templar::versions_quarto_multilingual(global_eval = FALSE, to_jupyter = TRUE, warn_edit = FALSE)
```

## Setup

Declare your libraries:

```{r, version = "R"}
#| label: libraries-r
#| include: false
library(tidyverse)
library(tidymodels)
library(glmnet)
library(discrim)
library(rpart)
library(rpart.plot)
library(baguette)
```

```{python, version = "python"}
#| label: libraries-py
#| include: false
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt


from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.neighbors import KNeighborsRegressor, KNeighborsClassifier

from sklearn.metrics import r2_score, confusion_matrix, accuracy_score, precision_score, recall_score, roc_auc_score, make_scorer

from sklearn.preprocessing import OneHotEncoder, StandardScaler, LabelEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import Pipeline, make_pipeline

from sklearn.model_selection import cross_val_score, GridSearchCV, KFold

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis

from sklearn.tree import DecisionTreeClassifier, plot_tree, RandomForestClassifier

from sklearn.ensemble import BaggingClassifier
```


# Setup

```{r, version = "R"}

cann <- read_csv("https://www.dropbox.com/s/s2a1uoiegitupjc/cannabis_full.csv?dl=1")


cann <- cann %>%
  mutate(
    Type = factor(Type)
  ) %>%
  rename(
    Spicy = `Spicy/Herbal`
  ) %>%
  drop_na()

cann_cvs <- vfold_cv(cann, v = 5)

cann_recipe <- recipe(Type ~ ., 
                     data = cann) %>%
  step_rm(Strain, Effects, Flavor, Dry, Mouth)

tree_mod <- decision_tree() %>%
  set_engine("rpart") %>%
  set_mode("classification")


tree_wflow <- workflow() %>%
  add_recipe(cann_recipe) %>%
  add_model(tree_mod)



tree_fit_1 <- tree_wflow %>%
  fit(cann)


tree_fitted <- tree_fit_1 %>% 
  pull_workflow_fit()

rpart.plot(tree_fitted$fit)
```

```{python, version = "python"}

cann = pd.read_csv("https://www.dropbox.com/s/s2a1uoiegitupjc/cannabis_full.csv?dl=1")


cann["Type"] = cann["Type"].astype("category")
cann = cann.dropna() 

cann = cann.drop(columns = ["Strain", "Effects", "Flavor", "Dry", "Mouth"])

cann_X = cann.drop(columns = ["Type"])

cross_validation = KFold(n_splits=10)

```

```{python, version = "python"}

tree = DecisionTreeClassifier()

tree.fit(cann_X, cann["Type"])

plot_tree(tree)


```


## Bagging

```{r, version = "R"}

bag_tree_spec <- bag_tree() %>%
  set_engine("rpart", times = 5) %>%
  set_mode("classification")

```

```{python, version = "python"}

bf = BaggingClassifier(base_classifier = DecisionTreeClassifier())


```

## Random Forests

```{r, version = "R"}
rf_spec <- random_forest() %>%
  set_engine("ranger", times = 5) %>%
  set_mode("classification")
```

```{python, version = "python"}

rf = RandomForestClassifier()

```


# Your turn

## Find the best *bagged* model for the cannabis data
## Find the best *random forest* model for the cannabis data
## Report some metrics on your models
